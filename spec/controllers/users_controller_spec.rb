require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do
   render_views
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  describe "GET new" do
    it "should be successful" do
      get :new
      response.should be_success
    end

    it "should have the right title" do
      get :new
      response.should have_selector("title", :content=>"Sign up")
    end
  end

  describe "GET show" do
    before(:each) do
      @user = Factory(:user)
    end

    it "should be successful" do
      get :show, :id=>@user
      response.should be_success
    end

    it "should find the right user" do
      get :show, :id=>@user
      assigns(:user).should == @user
    end

    it "should include the user's name'" do
      get :show, :id=>@user
      response.should have_selector("h1", :content=>@user.name)
    end

    it "should have profile image" do
      get :show, :id=>@user
      response.should have_selector("h1>img", :class=>"gravatar")
    end
  end

  describe "POST 'create'" do
    describe "failure" do
      before(:each) do
        @attr = Factory(:user)
        @attr = {:user=>"", :email=>"", :password=>"", :password_confirmation=>""}
      end

      it "should not create a user" do
        lambda do
          post :create, :user=>@attr
        end.should_not change(User, :count)
      end

      it "should not create a user" do

      end

      it "should have the right title" do
        post :create, :user=>@attr
        response.should have_selector("title", :content=>"Sign up")
      end

      it "should have render 'new' page" do
        post :create, :user=>@attr
        response.should render_template('new')
      end
    end
  end

end
